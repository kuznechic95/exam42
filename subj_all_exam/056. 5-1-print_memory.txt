Assignment name  : print_memory
Expected files   : print_memory.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a function that takes (const void *addr, size_t size), and displays the
memory as in the example.

Your function must be declared as follows:

void	print_memory(const void *addr, size_t size);

---------
$> cat main.c
void	print_memory(const void *addr, size_t size);

int	main(void)
{
	int	tab[10] = {0, 23, 150, 255,
	              12, 16,  21, 42};

	print_memory(tab, sizeof(tab));
	return (0);
}
$> gcc -Wall -Wall -Werror main.c print_memory.c && ./a.out | cat -e
0000 0000 1700 0000 9600 0000 ff00 0000 ................$
0c00 0000 1000 0000 1500 0000 2a00 0000 ............*...$
0000 0000 0000 0000                     ........$

void		print_bit(unsigned char c)
{
	char	*hex;

	hex = "0123456789abcdef";
	write(1, &hex[c / 16], 1);
	write(1, &hex[c % 16], 1);
}

void		print_mem(char *ps, size_t t, size_t size)
{
	size_t	i;

	i = t;
	while (i < t + 16 && i < size)
	{
		print_bit(ps[i]);
		if (i % 2)
			write(1, " ", 1);
		i++;
	}
	while (i < t + 16)
	{
		write(1, "  ", 2);
		if (i % 2)
			write(1, " ", 1);
		i++;
	}
	i = t;
	while (i < t + 16 && i < size)
	{
		if (ps[i] > 31 && ps[i] < 127)
			write(1, &ps[i], 1);
		else
			write(1, ".", 1);
		i++;
	}
	write(1, "\n", 1);
}

void		print_memory(const void *addr, size_t size)
{
	size_t	t;
	char	*ps;

	t = 0;
	ps = (char *)addr;
	while (t < size)
	{
		print_mem(ps, t, size);
		t += 16;
	}
}
